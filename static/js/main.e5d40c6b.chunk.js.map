{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["data1","options1","chartArea","width","legend","position","textStyle","color","backgroundColor","titleTextStyle","fontName","data2","options2","hAxis","vAxis","App","className","style","height","chartType","loader","legendToggle","data","options","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAIIA,G,MAAS,CACX,CAAC,OAAQ,iBACT,CAAC,MAAW,KACZ,CAAC,OAAa,KACd,CAAC,cAAgB,IACjB,CAAC,MAAO,IACR,CAAC,QAAY,IACb,CAAC,cAAiB,IAClB,CAAC,YAAgB,IACjB,CAAC,aAAiB,IAClB,CAAC,MAAU,IACX,CAAC,WAAe,IAChB,CAAC,SAAa,OAGZC,EAAW,CACbC,UAAW,CAAEC,MAAO,OACpBC,OAAQ,CAACC,SAAS,SACRC,UAAW,CACTC,MAAO,UAEnBC,gBAAiB,UACjBC,eAAgB,CAACF,MAAO,SACxBG,SAAS,cAGPC,EAAQ,CACV,CAAC,OAAQ,iBACT,CAAC,QAAS,KACV,CAAC,UAAW,KACZ,CAAC,WAAY,KACb,CAAC,YAAa,IACd,CAAC,YAAa,IAGZC,EAAW,CAEbF,SAAS,aACTR,UAAW,CAAEC,MAAO,OACpBC,OAAQ,CAACC,SAAS,SACNC,UAAW,CACTC,MAAO,UAErBE,eAAgB,CAACF,MAAO,SACxBC,gBAAiB,UACjBK,MAAO,CACLP,UAAW,CAAEC,MAAO,QACpBG,SAAU,eAGZI,MAAO,CACLR,UAAW,CAAEC,MAAO,QACpBG,SAAU,gBAoDCK,MA/Cf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIC,MAAO,CAACV,MAAO,WAAnB,uCACA,sLACA,oBAAIS,UAAU,QAAd,4BACA,cAAC,IAAD,CACAb,MAAM,OACNe,OAAO,QACPC,UAAU,WACVC,OAAQ,gDACRC,cAAY,EACZC,KAAOtB,EACPuB,QAAWtB,IAEf,kDACA,cAAC,IAAD,CACAE,MAAM,OACNe,OAAO,QACPC,UAAU,WACVC,OAAQ,gDACRE,KAAMX,EACNY,QAAWX,IAGb,uDACA,sBAAKI,UAAU,UAAf,UACA,iDACA,gDACA,wCACA,kDACA,2CACA,kDACA,2CACA,6CACA,6CACA,8CACA,4CACA,+CACA,+CACA,4CACA,0CACA,0DC3FeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e5d40c6b.chunk.js","sourcesContent":["import React from 'react';\nimport Chart from \"react-google-charts\";\nimport './App.css';\n\nlet data1 =  [\n  ['Task', 'Hours per Day'],\n  ['Pop',     233],\n  ['Rock',      139],\n  ['Modern Rock',  61],\n  ['Rap', 52],\n  ['K-Pop',    27],\n  ['Lo-Fi Beats',   22],\n  ['Indie Pop',    20],\n  ['Show Tunes',    20],\n  ['EDM',    20],\n  ['Pop Punk',    17],\n  ['Others',    217],\n]\n\nlet options1 = {\n  chartArea: { width: '80%' },\n  legend: {position:'bottom',\n            textStyle: {\n              color: 'white'\n            }},\n  backgroundColor: '#121212',\n  titleTextStyle: {color: 'white'},\n  fontName:'Montserrat',\n}\n\nlet data2 = [\n  ['Task', 'No. of people'],\n  ['0-20k', 287],\n  ['20k-50k', 328],\n  ['50k-100k', 174],\n  ['100k-200k', 36],\n  ['200k-300k', 3]\n]\n\nlet options2 = {\n  // Material design options\n  fontName:'Montserrat',\n  chartArea: { width: '80%' },\n  legend: {position:'bottom',\n              textStyle: {\n                color: 'white'\n              }},\n  titleTextStyle: {color: 'white'},\n  backgroundColor: '#121212',\n  hAxis: {\n    textStyle: { color: 'white',\n    fontName: 'Montserrat'\n  }\n  },\n  vAxis: {\n    textStyle: { color: 'white',\n    fontName: 'Montserrat'\n  }\n  },\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 style={{color: \"#1DB954\"}}>Spotify Wrapped Data 2020</h1>\n      <p>I recently conducted a survey on people's Spotify wrapped data and decided to see some trends and visualise this data. The following are the results.</p>\n      <h2 className=\"title\">Popular Genres</h2>\n      <Chart\n      width=\"100%\"\n      height=\"500px\"\n      chartType=\"PieChart\"\n      loader={<div>Loading Chart</div>}\n      legendToggle\n      data= {data1}\n      options = {options1}\n  />\n  <h2>Minutes Listened</h2>\n  <Chart\n  width=\"100%\"\n  height=\"500px\"\n  chartType=\"BarChart\"\n  loader={<div>Loading Chart</div>}\n  data={data2}\n  options = {options2}\n  \n/>\n<h2> Top Artists (Ranked)</h2>\n<div className=\"Artists\">\n<li>1. Taylor Swift</li>\n<li>2. The Beatles</li>\n<li>3. BTS</li>\n<li>4. Glass Animals</li>\n<li>5. Eminem</li>\n<li>6. Artic Monkeys</li>\n<li>=The 1975</li>\n<li>=The Weeknd</li>\n<li>7. Dua Lipa</li>\n<li>= Juice WRLD</li>\n<li>= Illenium</li>\n<li>= Frank Ocean</li>\n<li>= Post Malone</li>\n<li>8. Nirvana</li>\n<li>9. Logic</li>\n<li>10. Billie Eilish</li>\n</div>\n</div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}