{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","className","style","color","width","height","chartType","loader","data","options","chartArea","legend","position","textStyle","backgroundColor","titleTextStyle","fontName","legendToggle","hAxis","vAxis","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAkGeA,MA/Ff,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIC,MAAO,CAACC,MAAO,WAAnB,uCACA,sLACA,oBAAIF,UAAU,QAAd,4BACA,cAAC,IAAD,CACAG,MAAM,OACNC,OAAO,QACTC,UAAU,WACVC,OAAQ,gDACRC,KAAM,CACJ,CAAC,OAAQ,iBACT,CAAC,MAAW,KACZ,CAAC,OAAa,KACd,CAAC,cAAgB,IACjB,CAAC,MAAO,IACR,CAAC,QAAY,IACb,CAAC,cAAiB,IAClB,CAAC,YAAgB,IACjB,CAAC,aAAiB,IAClB,CAAC,MAAU,IACX,CAAC,WAAe,IAChB,CAAC,SAAa,MAEhBC,QAAS,CACPC,UAAW,CAAEN,MAAO,OACpBO,OAAQ,CAACC,SAAS,SACRC,UAAW,CACTV,MAAO,UAEnBW,gBAAiB,UACjBC,eAAgB,CAACZ,MAAO,SACxBa,SAAS,cAEXC,cAAY,IAEd,kDACA,cAAC,IAAD,CACAb,MAAM,OACNC,OAAO,QACPC,UAAU,WACVC,OAAQ,gDACRC,KAAM,CACJ,CAAC,OAAQ,iBACT,CAAC,QAAS,KACV,CAAC,UAAW,KACZ,CAAC,WAAY,KACb,CAAC,YAAa,IACd,CAAC,YAAa,IAEhBC,QAAS,CAEPO,SAAS,aACTN,UAAW,CAAEN,MAAO,OACpBO,OAAQ,CAACC,SAAS,SACNC,UAAW,CACTV,MAAO,UAErBY,eAAgB,CAACZ,MAAO,SACxBW,gBAAiB,UACjBI,MAAO,CACLL,UAAW,CAAEV,MAAO,QACpBa,SAAU,eAGZG,MAAO,CACLN,UAAW,CAAEV,MAAO,QACpBa,SAAU,kBAKhB,uDACA,sBAAKf,UAAU,UAAf,UACA,iDACA,gDACA,wCACA,kDACA,2CACA,kDACA,2CACA,6CACA,6CACA,8CACA,4CACA,+CACA,+CACA,4CACA,0CACA,0DCjFemB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9bdf02fe.chunk.js","sourcesContent":["import Chart from \"react-google-charts\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 style={{color: \"#1DB954\"}}>Spotify Wrapped Data 2020</h1>\n      <p>I recently conducted a survey on people's Spotify wrapped data and decided to see some trends and visualise this data. The following are the results.</p>\n      <h2 className=\"title\">Popular Genres</h2>\n      <Chart\n      width=\"100%\"\n      height=\"500px\"\n    chartType=\"PieChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      ['Task', 'Hours per Day'],\n      ['Pop',     233],\n      ['Rock',      139],\n      ['Modern Rock',  61],\n      ['Rap', 52],\n      ['K-Pop',    27],\n      ['Lo-Fi Beats',   22],\n      ['Indie Pop',    20],\n      ['Show Tunes',    20],\n      ['EDM',    20],\n      ['Pop Punk',    17],\n      ['Others',    217],\n    ]}\n    options={{\n      chartArea: { width: '80%' },\n      legend: {position:'bottom',\n                textStyle: {\n                  color: 'white'\n                }},\n      backgroundColor: '#121212',\n      titleTextStyle: {color: 'white'},\n      fontName:'Montserrat',\n    }}\n    legendToggle\n  />\n  <h2>Minutes Listened</h2>\n  <Chart\n  width=\"100%\"\n  height=\"500px\"\n  chartType=\"BarChart\"\n  loader={<div>Loading Chart</div>}\n  data={[\n    ['Task', 'No. of people'],\n    ['0-20k', 287],\n    ['20k-50k', 328],\n    ['50k-100k', 174],\n    ['100k-200k', 36],\n    ['200k-300k', 3]\n  ]}\n  options={{\n    // Material design options\n    fontName:'Montserrat',\n    chartArea: { width: '80%' },\n    legend: {position:'bottom',\n                textStyle: {\n                  color: 'white'\n                }},\n    titleTextStyle: {color: 'white'},\n    backgroundColor: '#121212',\n    hAxis: {\n      textStyle: { color: 'white',\n      fontName: 'Montserrat'\n    }\n    },\n    vAxis: {\n      textStyle: { color: 'white',\n      fontName: 'Montserrat'\n    }\n    },\n  }}\n/>\n<h2> Top Artists (Ranked)</h2>\n<div className=\"Artists\">\n<li>1. Taylor Swift</li>\n<li>2. The Beatles</li>\n<li>3. BTS</li>\n<li>4. Glass Animals</li>\n<li>5. Eminem</li>\n<li>6. Artic Monkeys</li>\n<li>=The 1975</li>\n<li>=The Weeknd</li>\n<li>7. Dua Lipa</li>\n<li>= Juice WRLD</li>\n<li>= Illenium</li>\n<li>= Frank Ocean</li>\n<li>= Post Malone</li>\n<li>8. Nirvana</li>\n<li>9. Logic</li>\n<li>10. Billie Eilish</li>\n</div>\n</div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}